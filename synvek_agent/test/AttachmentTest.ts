import { assertEquals, assertGreater } from 'https://deno.land/std/testing/asserts.ts'
import { AttachmentService } from '../src/AttachmentService.ts'
import { ChatDataService } from '../src/ChatDataService.ts'
import { ConversionService } from '../src/ConversionService.ts'

Deno.test('Test add attachment', () => {
  AttachmentService.deleteAllAttachments()
  ChatDataService.deleteAllChats()
  ConversionService.deleteAllConversions()
  let conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 0)
  const conversionId = ConversionService.addConversion('testConversionName', null)
  assertGreater(conversionId, 0)
  conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 1)
  let chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 0)
  const chatId = ChatDataService.addChat('LLM', 'hello world', conversionId)
  assertGreater(chatId, 0)
  chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 1)
  let attachments = AttachmentService.getAttachments(chatId)
  assertEquals(attachments.length, 0)
  const attachmentId = AttachmentService.addAttachment('testAttachmentName', 'testAttachmentContent', 'doc', chatId)
  assertGreater(attachmentId, 0)
  attachments = AttachmentService.getAttachments(chatId)
  assertEquals(attachments.length, 1)
})

Deno.test('Test get attachment with valid data', () => {
  AttachmentService.deleteAllAttachments()
  ChatDataService.deleteAllChats()
  ConversionService.deleteAllConversions()
  let conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 0)
  const conversionId = ConversionService.addConversion('testConversionName', null)
  assertGreater(conversionId, 0)
  conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 1)
  let chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 0)
  const chatId = ChatDataService.addChat('LLM', 'hello world', conversionId)
  assertGreater(chatId, 0)
  chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 1)
  const attachments = AttachmentService.getAttachments(chatId)
  assertEquals(attachments.length, 0)
  const attachmentId = AttachmentService.addAttachment('testAttachmentName', 'testAttachmentContent', 'doc', chatId)
  assertGreater(attachmentId, 0)
  const returnAttachment = AttachmentService.getAttachment(attachmentId)
  assertEquals(returnAttachment !== null, true)
})

Deno.test('Test get attachment with invalid data', () => {
  AttachmentService.deleteAllAttachments()
  ChatDataService.deleteAllChats()
  ConversionService.deleteAllConversions()
  let conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 0)
  const conversionId = ConversionService.addConversion('testConversionName', null)
  assertGreater(conversionId, 0)
  conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 1)
  let chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 0)
  const chatId = ChatDataService.addChat('LLM', 'hello world', conversionId)
  assertGreater(chatId, 0)
  chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 1)
  const attachments = AttachmentService.getAttachments(chatId)
  assertEquals(attachments.length, 0)
  const attachmentId = AttachmentService.addAttachment('testAttachmentName', 'testAttachmentContent', 'doc', chatId)
  assertGreater(attachmentId, 0)
  const returnAttachment = AttachmentService.getAttachment(attachmentId + 1)
  assertEquals(returnAttachment === null, true)
})

Deno.test('Test update attachment', () => {
  AttachmentService.deleteAllAttachments()
  ChatDataService.deleteAllChats()
  ConversionService.deleteAllConversions()
  let conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 0)
  const conversionId = ConversionService.addConversion('testConversionName', null)
  assertGreater(conversionId, 0)
  conversions = ConversionService.getConversions()
  assertEquals(conversions.length, 1)
  let chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 0)
  const chatId = ChatDataService.addChat('LLM', 'hello world', conversionId)
  assertGreater(chatId, 0)
  chats = ChatDataService.getChats(conversionId)
  assertEquals(chats.length, 1)
  const attachments = AttachmentService.getAttachments(chatId)
  assertEquals(attachments.length, 0)
  const attachmentId = AttachmentService.addAttachment('testAttachmentName', 'testAttachmentContent', 'doc', chatId)
  assertGreater(attachmentId, 0)
  AttachmentService.updateAttachment(attachmentId, 'updatedTestAttachmentName', 'updatedTestAttachmentContent', 'xls', chatId)
  const returnAttachment = AttachmentService.getAttachment(attachmentId)
  assertEquals(returnAttachment !== null, true)
  assertEquals(returnAttachment!.attachmentName, 'updatedTestAttachmentName')
})
